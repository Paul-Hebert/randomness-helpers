---
import Layout from "../layouts/Layout.astro";
import Example from "../components/Example.astro";
import { random } from "../../lib/index.js";
import { Code } from "astro/components";

const colorDisplayFunction = (value: string) =>
  `<div style="background-color: ${value}; padding: 2em;">
    <div style="background: #fffe; padding: 0.5em;">${value}</div>
  </div>
`;
---

<Layout title="Randomness Helpers">
  <h1>Randomness Helpers</h1>

  <p>
    A collection of helper functions to make it easy to generate random values
    for generative art, games, and more.
  </p>

  <!-- 
  <h2>Examples</h2>

  <div class="example-group">
    <Example
      callbackFunction={() => {
        const starSize = random(5, 10);
        const star = `<circle cx="50" cy="50" r="${starSize}" fill="${random.hsl(
          { h: [0, 100], s: [80, 100], l: [50, 80] }
        )}" />`;
        const planets = [];

        for (
          let distance = starSize + 5;
          distance < 40;
          distance += random(5, 10)
        ) {
          const orbit = `<circle cx="50" cy="50" fill="none" stroke="#ccc" r="${distance}"/>`;
          const planet = `<circle 
            cx="50" 
            cy="${50 + distance}" 
            fill="${random.hsl({ s: [80, 100], l: [60, 90] })}"  
            r="${random(2, 4)}"
          />`;
          planets.push(`
            <g style="transform-origin: center; rotate: ${random.degree()}deg;">
              ${orbit}
              ${planet}
            </g>
          `);
        }
        return `
        <svg viewBox="0 0 100 100" width="300" height="300" style="background: #000">
          ${star}
          ${planets.join("\n")}
        </svg>
      `;
      }}
      
      prefixedCode={startupCode}
    />
  </div> -->

  <h2>Getting Started</h2>

  You can install the library from npm:

  <Code lang="bash" code="npm i randomness-helpers" />

  <p>
    The package exports a <code>random</code> helper
  </p>

  <Code lang="js" code={`import { random } from 'randomness-helpers';`} />

  <p>
    You can call <code>random</code> directly to generate a random number between
    two values:
  </p>
  <Example callbackFunction={() => random(5, 20)} codeExample="random(5, 20)" />

  <p>
    <code>random</code> also has a number of helper methods for generating different
    types of numbers, colors, geometric values, and more. For example, here are a
    few common random number helpers:
  </p>

  <div class="example-group">
    <Example
      callbackFunction={() => random.int(0, 100)}
      codeExample="random.int(0, 100)"
    />

    <Example
      callbackFunction={() => random.decimal()}
      codeExample="random.decimal()"
    />

    <Example
      callbackFunction={() => random.percent()}
      codeExample="random.percent()"
    />
  </div>

  <h2>Seeded Randomness</h2>

  <p>
    By default, the helper methods rely on <code>Math.random</code>. If you
    would prefer to use seeded random values there is a separate export for
    that. These functions are slightly slower, but ensure that each time you run
    a series of random operations with the same seed, they'll return the same
    values.
  </p>

  <p>TODO: Explain why this is helpful. Explain it can be slower.</p>

  <p>
    You'll need to call the <code>seed</code> function with your chosen seed to initialize
    the random number generator. From there you can use it the same way as the non-seeded
    helpers.
  </p>

  <Code
    lang="js"
    code={`import { seed } from 'randomness-helpers';

const random = seed(123);

random(0, 100);`}
  />

  <h2>Chance</h2>

  <p>There are a few helpers for common randomness operations.</p>

  <p>
    <code>chance</code> returns either true or false. By default, it has a 50% chance
    of being `true` but you can pass in an optional likelihood variable.
  </p>

  <div class="example-group">
    <Example
      codeExample={`// A 50% chance of "good"
random.chance() ? "good" : "bad"`}
      callbackFunction={() => (random.chance() ? "good" : "bad")}
    />
    <Example
      codeExample={`// A 75% chance of "cloudy"
random.chance(0.75) ? "cloudy" : "meatballs"`}
      callbackFunction={() => (random.chance(0.75) ? "cloudy" : "meatballs")}
    />
  </div>

  <h2>Colors</h2>

  <p>There are also helpers to generate random HSL colors.</p>

  <p>
    You can generate a completely random color, or pass in an object with
    optional <code>h</code>, <code>s</code>, <code>l</code>, and <code>a</code> properties.
    (For hue, saturation, lightness, and alpha (transparency.))
  </p>
  <p>
    Each property should either be an exact value, or an array with <code
      >[min, max]</code
    >
    values.
  </p>

  <div class="example-group">
    <Example
      callbackFunction={() => colorDisplayFunction(random.hsl())}
      codeExample="random.hsl()"
    />

    <Example
      callbackFunction={() => colorDisplayFunction(random.hsl({ h: [0, 60] }))}
      codeExample="random.hsl({ h: [0, 60] })"
    />

    <Example
      callbackFunction={() =>
        colorDisplayFunction(random.hsl({ s: [40, 60], l: 75 }))}
      codeExample="random.hsl({ s: [40, 60], l: 75 })"
    />
  </div>

  <p>
    You can also generate individual <code>hue</code>, <code>saturation</code>,
    and <code>lightness</code> values:
  </p>

  <div class="example-group">
    <Example callbackFunction={() => random.hue()} codeExample="random.hue()" />
    <Example
      callbackFunction={() => random.saturation()}
      codeExample="random.saturation()"
    />
    <Example
      callbackFunction={() => random.lightness()}
      codeExample="random.lightness()"
    />
  </div>

  <h2>Geometry</h2>

  <div class="example-group">
    <Example
      codeExample="random.degree()"
      callbackFunction={() => {
        const value = random.degree();
        return `${value}:
        
        <svg style="rotate: ${value}deg; overflow: visible;" viewBox="0 0 100 100" width="100" height="100">
          <circle fill="#fff6" stroke="#000" r="49" cx="50" cy="50" />
          <circle fill="#000" r="10" cx="50" cy="50" />
          <circle fill="#000" r="5" cx="50" cy="1" />
          <line fill="none" stroke="#000" x1="50" y1="50" x2="50" y2="1" />
        </svg>
      `;
      }}
    />
  </div>

  <style is:global>
    *,
    *:before,
    *:after {
      margin: 0;
      line-height: 1.4;
      box-sizing: border-box;
    }

    html {
      --hue: 240;
      font-size: clamp(1em, calc(0.8em + 0.5vw), 1.25em);
      font-family: sans-serif;
    }

    body {
      color: hsl(var(--hue), 80%, 5%);
      background-color: hsl(var(--hue), 10%, 98%);

      max-width: 80ch;
      margin: 0 auto;
      padding: 4em 1em;
    }

    p {
      max-width: 70ch;
    }

    body > * + * {
      margin-top: 1.25em;
    }

    body > * + :is(h1, h2, h3, h4, h5, h6) {
      margin-top: 1.5em;
    }

    :is(h1, h2, h3, h4, h5, h6) {
      color: hsl(var(--hue), 100%, 10%);
    }

    .example-group {
      display: flex;
      gap: 0.75em;
      flex-wrap: wrap;
    }

    .example-group > * {
      flex-grow: 1;
    }

    :not(pre) > code {
      color: hsl(var(--hue), 100%, 15%);
      background-color: hsl(var(--hue), 50%, 97%);
      border: 1px solid hsl(var(--hue), 50%, 85%);
      padding: 0.08em 0.2em;
      border-radius: 0.25em;
    }

    pre.astro-code {
      background-color: hsl(var(--hue), 20%, 10%) !important;
      line-height: 1.5;
      padding: 1em;
      border-radius: 0.25em;
    }

    output {
      display: block;
      background-color: hsl(var(--hue), 10%, 90%);
      padding: 1em;
      border-bottom-right-radius: 0.25em;
      border-bottom-left-radius: 0.25em;
    }

    .example .astro-code {
      margin-bottom: 0;
      border-bottom-right-radius: 0;
      border-bottom-left-radius: 0;
    }
  </style>
</Layout>
